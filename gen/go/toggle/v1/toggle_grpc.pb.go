// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: toggle/v1/toggle.proto

package togglev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ToggleClient is the client API for Toggle service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ToggleClient interface {
	CreateScope(ctx context.Context, in *CreateScopeRequest, opts ...grpc.CallOption) (*CreateScopeResponse, error)
}

type toggleClient struct {
	cc grpc.ClientConnInterface
}

func NewToggleClient(cc grpc.ClientConnInterface) ToggleClient {
	return &toggleClient{cc}
}

func (c *toggleClient) CreateScope(ctx context.Context, in *CreateScopeRequest, opts ...grpc.CallOption) (*CreateScopeResponse, error) {
	out := new(CreateScopeResponse)
	err := c.cc.Invoke(ctx, "/toggle.v1.Toggle/CreateScope", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ToggleServer is the server API for Toggle service.
// All implementations must embed UnimplementedToggleServer
// for forward compatibility
type ToggleServer interface {
	CreateScope(context.Context, *CreateScopeRequest) (*CreateScopeResponse, error)
	mustEmbedUnimplementedToggleServer()
}

// UnimplementedToggleServer must be embedded to have forward compatible implementations.
type UnimplementedToggleServer struct {
}

func (UnimplementedToggleServer) CreateScope(context.Context, *CreateScopeRequest) (*CreateScopeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateScope not implemented")
}
func (UnimplementedToggleServer) mustEmbedUnimplementedToggleServer() {}

// UnsafeToggleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ToggleServer will
// result in compilation errors.
type UnsafeToggleServer interface {
	mustEmbedUnimplementedToggleServer()
}

func RegisterToggleServer(s grpc.ServiceRegistrar, srv ToggleServer) {
	s.RegisterService(&Toggle_ServiceDesc, srv)
}

func _Toggle_CreateScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateScopeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToggleServer).CreateScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/toggle.v1.Toggle/CreateScope",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToggleServer).CreateScope(ctx, req.(*CreateScopeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Toggle_ServiceDesc is the grpc.ServiceDesc for Toggle service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Toggle_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "toggle.v1.Toggle",
	HandlerType: (*ToggleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateScope",
			Handler:    _Toggle_CreateScope_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "toggle/v1/toggle.proto",
}
