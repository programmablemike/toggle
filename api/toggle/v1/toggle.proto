syntax = "proto3";

package toggle.v1;

option go_package = "github.com/programmablemike/toggle/gen/go/toggle/v1;togglev1";

service ToggleService {
    rpc CreateScope(CreateScopeRequest) returns (CreateScopeResponse) {}
    rpc ListScope(ListScopeRequest) returns (ListScopeResponse) {}
    rpc CreateScopeSet(CreateScopeSetRequest) returns (CreateScopeSetResponse) {}
    rpc ListScopeSet(ListScopeSetRequest) returns (ListScopeSetResponse) {}
}

//
// General use types
//
message NameInfo {
    string name = 1;
    optional string description = 2;
}

message ScopeSet {
    string id = 1;
    optional NameInfo info = 2;
    string toggle_set_id = 3; // Foreign key ID for Toggle Set
}

message Scope {
    string id = 1;
    string scope_set_id = 2;
    optional NameInfo info = 3;
    bool required = 4;
    repeated string acceptable_values = 5;
}

message ToggleSet {
    string id = 1;
    optional NameInfo info = 2;
    string scope_set_id = 3; // Foreign key ID for Scope Set
}

enum ToggleValue {
    TOGGLE_OFF = 0;
    TOGGLE_ON = 1;
}

message Toggle {
    string id = 1;
    string toggle_set_id = 2;
    optional NameInfo info = 3;
    ToggleValue value = 4;
    ToggleValue default_value = 5;
}

message MessageInfo {
    string id = 1;
}

//
// CreateScope
//
message CreateScopeRequest {
    MessageInfo info = 1;
    Scope value = 2;
}

message CreateScopeResponse {
    MessageInfo info = 1;
    Scope value = 2;
}

//
// CreateScopeSet
//
message CreateScopeSetRequest {
    MessageInfo info = 1;
    ScopeSet value = 2;
}
message CreateScopeSetResponse {
    MessageInfo info = 1;
    ScopeSet value = 2;
}

//
// ListScopeSets
//
message ListScopeSetRequest {
    MessageInfo info = 1;
}

message ListScopeSetResponse {
    MessageInfo info = 1;
    repeated ScopeSet result = 2;
}

//
// ListScopes
//
message ListScopeRequest {
    MessageInfo info = 1;
}

message ListScopeResponse {
    MessageInfo info = 1;
    repeated Scope result = 2;
}

//
// CreateToggleSet
//

//
// CreateToggle
//